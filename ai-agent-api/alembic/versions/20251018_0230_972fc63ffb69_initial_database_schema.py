"""Initial database schema

Revision ID: 972fc63ffb69
Revises: 
Create Date: 2025-10-18 02:30:08.598877

"""
from alembic import op
import sqlalchemy as sa
from app.database.base import JSONB, ARRAY, INET


# revision identifiers, used by Alembic.
revision = '972fc63ffb69'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('organizations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('slug', sa.String(length=100), nullable=False),
    sa.Column('primary_email', sa.String(length=255), nullable=True),
    sa.Column('primary_contact_name', sa.String(length=255), nullable=True),
    sa.Column('plan', sa.String(length=50), nullable=False),
    sa.Column('max_users', sa.Integer(), nullable=True),
    sa.Column('max_sessions_per_month', sa.Integer(), nullable=True),
    sa.Column('max_storage_gb', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint("plan IN ('free', 'pro', 'enterprise')", name=op.f('ck_organizations_chk_plan')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_organizations'))
    )
    op.create_index(op.f('ix_organizations_slug'), 'organizations', ['slug'], unique=True)
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('organization_id', sa.UUID(), nullable=True),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('username', sa.String(length=100), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('full_name', sa.String(length=255), nullable=True),
    sa.Column('avatar_url', sa.String(), nullable=True),
    sa.Column('role', sa.String(length=50), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('max_concurrent_sessions', sa.Integer(), nullable=True),
    sa.Column('max_api_calls_per_hour', sa.Integer(), nullable=True),
    sa.Column('max_storage_mb', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('last_login_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint("role IN ('admin', 'user', 'viewer')", name=op.f('ck_users_chk_role')),
    sa.CheckConstraint('max_concurrent_sessions > 0 AND max_api_calls_per_hour > 0 AND max_storage_mb > 0', name=op.f('ck_users_chk_positive_quotas')),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name=op.f('fk_users_organization_id_organizations'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users')),
    sa.UniqueConstraint('username', name=op.f('uq_users_username'))
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_is_active'), 'users', ['is_active'], unique=False)
    op.create_table('hooks',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('hook_event', sa.String(length=50), nullable=False),
    sa.Column('matcher', sa.String(length=255), nullable=True),
    sa.Column('implementation_type', sa.String(length=50), nullable=False),
    sa.Column('implementation_config', JSONB(), nullable=False),
    sa.Column('is_enabled', sa.Boolean(), nullable=True),
    sa.Column('execution_timeout_ms', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint("hook_event IN ('PreToolUse', 'PostToolUse', 'UserPromptSubmit', 'Stop', 'SubagentStop', 'PreCompact')", name=op.f('ck_hooks_chk_hook_event')),
    sa.CheckConstraint("implementation_type IN ('webhook', 'script', 'builtin')", name=op.f('ck_hooks_chk_implementation_type')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_hooks_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_hooks'))
    )
    op.create_index('idx_hooks_event', 'hooks', ['hook_event', 'is_enabled'], unique=False)
    op.create_index('idx_hooks_user', 'hooks', ['user_id'], unique=False, postgresql_where='deleted_at IS NULL')
    op.create_table('mcp_servers',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('server_type', sa.String(length=50), nullable=False),
    sa.Column('config', JSONB(), nullable=False),
    sa.Column('is_enabled', sa.Boolean(), nullable=True),
    sa.Column('is_global', sa.Boolean(), nullable=True),
    sa.Column('last_health_check_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('health_status', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint("health_status IN ('healthy', 'degraded', 'unhealthy', 'unknown') OR health_status IS NULL", name=op.f('ck_mcp_servers_chk_health_status')),
    sa.CheckConstraint("server_type IN ('stdio', 'sse', 'http', 'sdk')", name=op.f('ck_mcp_servers_chk_server_type')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_mcp_servers_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_mcp_servers')),
    sa.UniqueConstraint('name', 'user_id', name='uq_server_name_user')
    )
    op.create_index('idx_mcp_servers_enabled', 'mcp_servers', ['is_enabled'], unique=False, postgresql_where='deleted_at IS NULL')
    op.create_index('idx_mcp_servers_global', 'mcp_servers', ['is_global'], unique=False, postgresql_where='is_global = true')
    op.create_index('idx_mcp_servers_user', 'mcp_servers', ['user_id'], unique=False, postgresql_where='deleted_at IS NULL')
    op.create_table('sessions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('mode', sa.String(length=50), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('sdk_options', JSONB(), nullable=False),
    sa.Column('working_directory_path', sa.Text(), nullable=True),
    sa.Column('parent_session_id', sa.UUID(), nullable=True),
    sa.Column('is_fork', sa.Boolean(), nullable=True),
    sa.Column('total_messages', sa.Integer(), nullable=True),
    sa.Column('total_tool_calls', sa.Integer(), nullable=True),
    sa.Column('total_cost_usd', sa.Numeric(precision=10, scale=6), nullable=True),
    sa.Column('duration_ms', sa.BigInteger(), nullable=True),
    sa.Column('api_input_tokens', sa.Integer(), nullable=True),
    sa.Column('api_output_tokens', sa.Integer(), nullable=True),
    sa.Column('api_cache_creation_tokens', sa.Integer(), nullable=True),
    sa.Column('api_cache_read_tokens', sa.Integer(), nullable=True),
    sa.Column('result_data', JSONB(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint("mode IN ('interactive', 'non_interactive')", name=op.f('ck_sessions_chk_mode')),
    sa.CheckConstraint("status IN ('created', 'connecting', 'active', 'paused', 'waiting', 'processing', 'completed', 'failed', 'terminated', 'archived')", name=op.f('ck_sessions_chk_status')),
    sa.ForeignKeyConstraint(['parent_session_id'], ['sessions.id'], name=op.f('fk_sessions_parent_session_id_sessions')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_sessions_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_sessions'))
    )
    op.create_index(op.f('ix_sessions_created_at'), 'sessions', ['created_at'], unique=False)
    op.create_index(op.f('ix_sessions_parent_session_id'), 'sessions', ['parent_session_id'], unique=False)
    op.create_index(op.f('ix_sessions_status'), 'sessions', ['status'], unique=False)
    op.create_index(op.f('ix_sessions_user_id'), 'sessions', ['user_id'], unique=False)
    op.create_table('tasks',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('prompt_template', sa.Text(), nullable=False),
    sa.Column('default_variables', JSONB(), nullable=True),
    sa.Column('allowed_tools', ARRAY(sa.String), server_default='{}', nullable=False),
    sa.Column('disallowed_tools', ARRAY(sa.String), server_default='{}', nullable=True),
    sa.Column('sdk_options', JSONB(), server_default='{}', nullable=True),
    sa.Column('working_directory_path', sa.String(length=1000), nullable=True),
    sa.Column('is_scheduled', sa.Boolean(), nullable=True),
    sa.Column('schedule_cron', sa.String(length=100), nullable=True),
    sa.Column('schedule_enabled', sa.Boolean(), nullable=True),
    sa.Column('generate_report', sa.Boolean(), nullable=True),
    sa.Column('report_format', sa.String(length=50), nullable=True),
    sa.Column('notification_config', JSONB(), nullable=True),
    sa.Column('tags', ARRAY(sa.String), nullable=True),
    sa.Column('is_public', sa.Boolean(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint("report_format IN ('json', 'markdown', 'html', 'pdf') OR report_format IS NULL", name=op.f('ck_tasks_chk_report_format')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_tasks_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_tasks'))
    )
    op.create_index('idx_tasks_name', 'tasks', ['name'], unique=False, postgresql_ops={'name': 'varchar_pattern_ops'})
    op.create_index('idx_tasks_scheduled', 'tasks', ['is_scheduled', 'schedule_enabled'], unique=False, postgresql_where='is_deleted = false')
    op.create_index('idx_tasks_tags', 'tasks', ['tags'], unique=False, postgresql_using='gin')
    op.create_index('idx_tasks_user', 'tasks', ['user_id', 'is_deleted'], unique=False)
    op.create_index(op.f('ix_tasks_created_at'), 'tasks', ['created_at'], unique=False)
    op.create_index(op.f('ix_tasks_is_deleted'), 'tasks', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_tasks_name'), 'tasks', ['name'], unique=False)
    op.create_table('audit_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('session_id', sa.UUID(), nullable=True),
    sa.Column('action_type', sa.String(length=100), nullable=False),
    sa.Column('resource_type', sa.String(length=50), nullable=True),
    sa.Column('resource_id', sa.UUID(), nullable=True),
    sa.Column('action_details', JSONB(), nullable=True),
    sa.Column('ip_address', INET(), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('request_id', sa.String(length=255), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.CheckConstraint("status IN ('success', 'failure', 'denied') OR status IS NULL", name=op.f('ck_audit_logs_chk_audit_status')),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], name=op.f('fk_audit_logs_session_id_sessions'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_audit_logs_user_id_users'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_audit_logs'))
    )
    op.create_index('idx_audit_logs_action', 'audit_logs', ['action_type', 'created_at'], unique=False, postgresql_ops={'created_at': 'DESC'})
    op.create_index('idx_audit_logs_created_at', 'audit_logs', ['created_at'], unique=False, postgresql_ops={'created_at': 'DESC'})
    op.create_index('idx_audit_logs_details', 'audit_logs', ['action_details'], unique=False, postgresql_using='gin')
    op.create_index('idx_audit_logs_resource', 'audit_logs', ['resource_type', 'resource_id'], unique=False)
    op.create_index('idx_audit_logs_session', 'audit_logs', ['session_id', 'created_at'], unique=False, postgresql_ops={'created_at': 'DESC'})
    op.create_index('idx_audit_logs_user', 'audit_logs', ['user_id', 'created_at'], unique=False, postgresql_ops={'created_at': 'DESC'})
    op.create_index(op.f('ix_audit_logs_created_at'), 'audit_logs', ['created_at'], unique=False)
    op.create_table('messages',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('message_type', sa.String(length=50), nullable=False),
    sa.Column('content', JSONB(), nullable=False),
    sa.Column('model', sa.String(length=100), nullable=True),
    sa.Column('parent_tool_use_id', sa.String(length=255), nullable=True),
    sa.Column('sequence_number', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.CheckConstraint("message_type IN ('user', 'assistant', 'system', 'result')", name=op.f('ck_messages_chk_message_type')),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], name=op.f('fk_messages_session_id_sessions'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_messages'))
    )
    op.create_index('idx_messages_content', 'messages', ['content'], unique=False, postgresql_using='gin')
    op.create_index('idx_messages_result', 'messages', ['session_id'], unique=False, postgresql_where="message_type = 'result'")
    op.create_index('idx_messages_session', 'messages', ['session_id', 'sequence_number'], unique=False)
    op.create_index(op.f('ix_messages_created_at'), 'messages', ['created_at'], unique=False)
    op.create_table('task_executions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('task_id', sa.UUID(), nullable=False),
    sa.Column('session_id', sa.UUID(), nullable=True),
    sa.Column('report_id', sa.UUID(), nullable=True),
    sa.Column('trigger_type', sa.String(length=50), nullable=False),
    sa.Column('trigger_metadata', JSONB(), nullable=True),
    sa.Column('prompt_variables', JSONB(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('error_message', sa.String(), nullable=True),
    sa.Column('result_data', JSONB(), nullable=True),
    sa.Column('total_messages', sa.Integer(), nullable=True),
    sa.Column('total_tool_calls', sa.Integer(), nullable=True),
    sa.Column('duration_seconds', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint("status IN ('pending', 'running', 'completed', 'failed', 'cancelled')", name=op.f('ck_task_executions_chk_task_execution_status')),
    sa.CheckConstraint("trigger_type IN ('manual', 'scheduled', 'webhook', 'api')", name=op.f('ck_task_executions_chk_trigger_type')),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], name='fk_task_executions_report_id_reports', ondelete='SET NULL', use_alter=True),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], name=op.f('fk_task_executions_session_id_sessions'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], name=op.f('fk_task_executions_task_id_tasks'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_task_executions'))
    )
    op.create_index('idx_task_executions_session', 'task_executions', ['session_id'], unique=False)
    op.create_index('idx_task_executions_status', 'task_executions', ['status', 'created_at'], unique=False)
    op.create_index('idx_task_executions_task', 'task_executions', ['task_id', 'created_at'], unique=False)
    op.create_index('idx_task_executions_trigger', 'task_executions', ['trigger_type'], unique=False)
    op.create_index(op.f('ix_task_executions_created_at'), 'task_executions', ['created_at'], unique=False)
    op.create_index(op.f('ix_task_executions_status'), 'task_executions', ['status'], unique=False)
    op.create_table('working_directories',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('directory_path', sa.Text(), nullable=False),
    sa.Column('archive_path', sa.Text(), nullable=True),
    sa.Column('total_files', sa.Integer(), nullable=True),
    sa.Column('total_size_bytes', sa.BigInteger(), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True),
    sa.Column('archived_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('file_manifest', JSONB(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], name=op.f('fk_working_directories_session_id_sessions'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_working_directories')),
    sa.UniqueConstraint('session_id', name=op.f('uq_working_directories_session_id'))
    )
    op.create_index('idx_working_dirs_archived', 'working_directories', ['is_archived'], unique=False)
    op.create_index('idx_working_dirs_session', 'working_directories', ['session_id'], unique=False)
    op.create_table('reports',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('task_execution_id', sa.UUID(), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('report_type', sa.String(length=50), nullable=True),
    sa.Column('content', JSONB(), nullable=False),
    sa.Column('file_path', sa.Text(), nullable=True),
    sa.Column('file_format', sa.String(length=50), nullable=True),
    sa.Column('file_size_bytes', sa.BigInteger(), nullable=True),
    sa.Column('template_name', sa.String(length=255), nullable=True),
    sa.Column('tags', ARRAY(sa.String), nullable=True),
    sa.Column('is_public', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint("file_format IN ('json', 'markdown', 'html', 'pdf') OR file_format IS NULL", name=op.f('ck_reports_chk_file_format')),
    sa.CheckConstraint("report_type IN ('auto_generated', 'custom', 'template')", name=op.f('ck_reports_chk_report_type')),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], name=op.f('fk_reports_session_id_sessions'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['task_execution_id'], ['task_executions.id'], name=op.f('fk_reports_task_execution_id_task_executions'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_reports_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_reports'))
    )
    op.create_index('idx_reports_content', 'reports', ['content'], unique=False, postgresql_using='gin')
    op.create_index('idx_reports_created_at', 'reports', ['created_at'], unique=False, postgresql_ops={'created_at': 'DESC'})
    op.create_index('idx_reports_session', 'reports', ['session_id'], unique=False)
    op.create_index('idx_reports_tags', 'reports', ['tags'], unique=False, postgresql_using='gin')
    op.create_index('idx_reports_user', 'reports', ['user_id'], unique=False)
    op.create_index(op.f('ix_reports_created_at'), 'reports', ['created_at'], unique=False)
    op.create_table('tool_calls',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('message_id', sa.UUID(), nullable=True),
    sa.Column('tool_name', sa.String(length=255), nullable=False),
    sa.Column('tool_use_id', sa.String(length=255), nullable=False),
    sa.Column('tool_input', JSONB(), nullable=False),
    sa.Column('tool_output', JSONB(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('is_error', sa.Boolean(), nullable=True),
    sa.Column('error_message', sa.String(), nullable=True),
    sa.Column('permission_decision', sa.String(length=50), nullable=True),
    sa.Column('permission_reason', sa.String(), nullable=True),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('duration_ms', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.CheckConstraint("permission_decision IN ('allow', 'deny', 'ask') OR permission_decision IS NULL", name=op.f('ck_tool_calls_chk_permission_decision')),
    sa.CheckConstraint("status IN ('pending', 'running', 'success', 'error', 'denied')", name=op.f('ck_tool_calls_chk_tool_call_status')),
    sa.ForeignKeyConstraint(['message_id'], ['messages.id'], name=op.f('fk_tool_calls_message_id_messages'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], name=op.f('fk_tool_calls_session_id_sessions'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_tool_calls'))
    )
    op.create_index('idx_tool_calls_input', 'tool_calls', ['tool_input'], unique=False, postgresql_using='gin')
    op.create_index('idx_tool_calls_output', 'tool_calls', ['tool_output'], unique=False, postgresql_using='gin')
    op.create_index('idx_tool_calls_permission', 'tool_calls', ['permission_decision'], unique=False, postgresql_where='permission_decision IS NOT NULL')
    op.create_index('idx_tool_calls_session', 'tool_calls', ['session_id', 'created_at'], unique=False)
    op.create_index('idx_tool_calls_status', 'tool_calls', ['status', 'created_at'], unique=False)
    op.create_index('idx_tool_calls_tool_name', 'tool_calls', ['tool_name', 'created_at'], unique=False)
    op.create_index(op.f('ix_tool_calls_created_at'), 'tool_calls', ['created_at'], unique=False)
    op.create_index(op.f('ix_tool_calls_status'), 'tool_calls', ['status'], unique=False)
    op.create_index(op.f('ix_tool_calls_tool_name'), 'tool_calls', ['tool_name'], unique=False)
    op.create_index(op.f('ix_tool_calls_tool_use_id'), 'tool_calls', ['tool_use_id'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_tool_calls_tool_use_id'), table_name='tool_calls')
    op.drop_index(op.f('ix_tool_calls_tool_name'), table_name='tool_calls')
    op.drop_index(op.f('ix_tool_calls_status'), table_name='tool_calls')
    op.drop_index(op.f('ix_tool_calls_created_at'), table_name='tool_calls')
    op.drop_index('idx_tool_calls_tool_name', table_name='tool_calls')
    op.drop_index('idx_tool_calls_status', table_name='tool_calls')
    op.drop_index('idx_tool_calls_session', table_name='tool_calls')
    op.drop_index('idx_tool_calls_permission', table_name='tool_calls', postgresql_where='permission_decision IS NOT NULL')
    op.drop_index('idx_tool_calls_output', table_name='tool_calls', postgresql_using='gin')
    op.drop_index('idx_tool_calls_input', table_name='tool_calls', postgresql_using='gin')
    op.drop_table('tool_calls')
    op.drop_index(op.f('ix_reports_created_at'), table_name='reports')
    op.drop_index('idx_reports_user', table_name='reports')
    op.drop_index('idx_reports_tags', table_name='reports', postgresql_using='gin')
    op.drop_index('idx_reports_session', table_name='reports')
    op.drop_index('idx_reports_created_at', table_name='reports', postgresql_ops={'created_at': 'DESC'})
    op.drop_index('idx_reports_content', table_name='reports', postgresql_using='gin')
    op.drop_table('reports')
    op.drop_index('idx_working_dirs_session', table_name='working_directories')
    op.drop_index('idx_working_dirs_archived', table_name='working_directories')
    op.drop_table('working_directories')
    op.drop_index(op.f('ix_task_executions_status'), table_name='task_executions')
    op.drop_index(op.f('ix_task_executions_created_at'), table_name='task_executions')
    op.drop_index('idx_task_executions_trigger', table_name='task_executions')
    op.drop_index('idx_task_executions_task', table_name='task_executions')
    op.drop_index('idx_task_executions_status', table_name='task_executions')
    op.drop_index('idx_task_executions_session', table_name='task_executions')
    op.drop_table('task_executions')
    op.drop_index(op.f('ix_messages_created_at'), table_name='messages')
    op.drop_index('idx_messages_session', table_name='messages')
    op.drop_index('idx_messages_result', table_name='messages', postgresql_where="message_type = 'result'")
    op.drop_index('idx_messages_content', table_name='messages', postgresql_using='gin')
    op.drop_table('messages')
    op.drop_index(op.f('ix_audit_logs_created_at'), table_name='audit_logs')
    op.drop_index('idx_audit_logs_user', table_name='audit_logs', postgresql_ops={'created_at': 'DESC'})
    op.drop_index('idx_audit_logs_session', table_name='audit_logs', postgresql_ops={'created_at': 'DESC'})
    op.drop_index('idx_audit_logs_resource', table_name='audit_logs')
    op.drop_index('idx_audit_logs_details', table_name='audit_logs', postgresql_using='gin')
    op.drop_index('idx_audit_logs_created_at', table_name='audit_logs', postgresql_ops={'created_at': 'DESC'})
    op.drop_index('idx_audit_logs_action', table_name='audit_logs', postgresql_ops={'created_at': 'DESC'})
    op.drop_table('audit_logs')
    op.drop_index(op.f('ix_tasks_name'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_is_deleted'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_created_at'), table_name='tasks')
    op.drop_index('idx_tasks_user', table_name='tasks')
    op.drop_index('idx_tasks_tags', table_name='tasks', postgresql_using='gin')
    op.drop_index('idx_tasks_scheduled', table_name='tasks', postgresql_where='is_deleted = false')
    op.drop_index('idx_tasks_name', table_name='tasks', postgresql_ops={'name': 'varchar_pattern_ops'})
    op.drop_table('tasks')
    op.drop_index(op.f('ix_sessions_user_id'), table_name='sessions')
    op.drop_index(op.f('ix_sessions_status'), table_name='sessions')
    op.drop_index(op.f('ix_sessions_parent_session_id'), table_name='sessions')
    op.drop_index(op.f('ix_sessions_created_at'), table_name='sessions')
    op.drop_table('sessions')
    op.drop_index('idx_mcp_servers_user', table_name='mcp_servers', postgresql_where='deleted_at IS NULL')
    op.drop_index('idx_mcp_servers_global', table_name='mcp_servers', postgresql_where='is_global = true')
    op.drop_index('idx_mcp_servers_enabled', table_name='mcp_servers', postgresql_where='deleted_at IS NULL')
    op.drop_table('mcp_servers')
    op.drop_index('idx_hooks_user', table_name='hooks', postgresql_where='deleted_at IS NULL')
    op.drop_index('idx_hooks_event', table_name='hooks')
    op.drop_table('hooks')
    op.drop_index(op.f('ix_users_is_active'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_organizations_slug'), table_name='organizations')
    op.drop_table('organizations')
    # ### end Alembic commands ###
